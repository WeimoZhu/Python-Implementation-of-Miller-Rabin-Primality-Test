import random

n = int(input("n:"))  # Input the number to be tested for primality
num_repetition = int(input("number of repetition:"))  # Input the number of repetitions for the test

def MillerRabin(n, num_repetition):
    if n == 2:
        return True
    
    if n % 2 == 0:
        return False

    m = n - 1  
    k = 0
    
    while m % 2 == 0:  # Keep dividing m by 2 until it's odd
        m = m // 2
        k += 1

    for j in range(num_repetition):  # Repeat the test for num_repetition times
        a = random.randint(2, n - 2)  # Choose a random positive integer a such that 1 < a < n âˆ’ 1
        b = pow(a, m, n)  # Calculate b = a^m mod n
        if b == 1 or b == n - 1:  # It is probably prime, stop the test and try another repetition with different value of a
            continue
        for i in range(1, k):  
            b = pow(b, 2, n)  
            if b == 1:  # n is composite
                return False
            elif b == n - 1:  # It is probably prime
                break
        else:  # If the loop completes without encountering a break statement, n is composite
            return False
    return True  # If all tests pass, n is probably prime

if MillerRabin(n, num_repetition): 
    print(f'{n} is probably prime.')
else:
    print(f'{n} is composite.')
